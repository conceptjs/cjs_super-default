{
  "uri" : "local://2RXuXvodVH9sO44KnlSmt6/",
  "name" : "User Management View",
  "category" : "",
  "parent" : "local://VsYb_oaY9JAh-adPMoTmO3/",
  "flags" : "U",
  "lvars" : [ {
    "name" : "model",
    "type" : "local://VsYb_oaY9JAh-adPMoTmO3/"
  } ],
  "vars" : [ {
    "name" : "htmlTemplate",
    "expr" : {
      "str" : "<html>\n    <head>\n        <link rel=\"stylesheet\" href=\"/resourcelocal://WCW7uMZD9eAnwK20O-_Nu4/\">\n        <link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.datatables.net/1.10.4/css/jquery.dataTables.css\">\n        <link rel=\"stylesheet\" type=\"text/css\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.2.0/css/bootstrap.min.css\">\n        <link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.datatables.net/tabletools/2.2.3/css/dataTables.tableTools.css\">\n        \n        <script src=\"js/knockout-3.2.0.js\"></script>\n        <script src=\"js/view.js\"></script>\n        <script type=\"text/javascript\" charset=\"utf8\" src=\"https://cdn.datatables.net/1.10.4/js/jquery.dataTables.js\"></script>\n        <script type=\"text/javascript\" charset=\"utf8\" src=\"https://cdn.datatables.net/tabletools/2.2.3/js/dataTables.tableTools.min.js\"></script>\n        <script type=\"text/javascript\" charset=\"utf8\" src=\"//cdnjs.cloudflare.com/ajax/libs/knockout.mapping/2.4.1/knockout.mapping.min.js\"></script>\n        \n        \n        <meta name=\"cjsSaveMode\" content=\"auto\">\n        <meta name=\"cjsHeaderActive\" content=\"yes\">\n        \n        <style>\n            td {  word-break: break-all} \n            \n            #inputActiveUser,\n            #inputUser {\n                width: 300px;\n            }\n            \n            .section-title{\n                margin-top:20px;\n                margin-bottom: 20px;\n                padding-bottom: 20px;\n                border-bottom-style: solid;\n                border-bottom-width: 1px;\n                border-bottom-color: gray;\n            }\n        </style>\n        \n        \n    </head>\n\n    <body>\n        <div class=\"container  usermanagement\">\n            <div class=\"row section-title\">\n                <h2>All Users</h2>\n            </div>\n            <div class=\"row\">\n                \n\n    <form class=\"form-inline\">\n        <div class=\"form-group\">\n                <input type=\"text\" class=\"form-control\" id=\"inputUser\" placeholder=\"Search User ...\" data-bind=\"value: userName\">\n        </div>\n        \n        <div class=\"form-group\">\n            <button type=\"submit\" class=\"btn btn-success\" data-bind=\"click: searchUser\">Search</button>\n        </div>\n        \n        <div class=\"form-group\">\n\n                <div class=\"checkbox\">\n\n                    <label><input id=\"showAllUser\" type=\"checkbox\"> Show all users</label>\n\n                </div>\n\n        </div>\n    </form>\n\n            </div>\n            <div class=\"row\">\n                <table id=\"userTable\" class=\"display\" cellspacing=\"0\" width=\"100%\">\n                    <thead>\n                        <tr>\n                            <th>User Name</th>\n                            <th>User Email</th>\n                            <th>Twitter</th>\n                            <th># of cards</th>\n                            <th>Update</th>\n                            <th>Delete</th>\n                            <th>URI</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                    </tbody>\n                </table>\n            </div>\n            <div class=\"row\">\n                <p># of User who has Yoke reporitory: <b><span data-bind=\"text: yokeRepoUserCT\"></span></b></p>\n                <p># of Total Users:<b><span data-bind=\"text: totalUserCT\"></span></b></p>\n                <p><span data-bind=\"visible: userCTAvailable\">the following <b><span data-bind=\"text: deactivatedUserCT\"></span></b> users could be deactivated:</span></p>\n                <ul class=\"list-group\" data-bind=\"foreach: deactivateUsers\">\n                    <li class=\"list-group-item list-group-item-info\" data-bind=\"text: userInfo\"></li>\n                </ul>\n            </div>\n            \n            <div class=\"row section-title\">\n                <h2>Active Users</h2>\n            </div>\n            \n            <div class=\"row\">\n            <form class=\"form-inline\">\n                <div class=\"form-group\">\n                    <input  type=\"text\" class=\"form-control\" id=\"inputActiveUser\" placeholder=\"Enter date boundary for active user ...\" data-bind=\"value: activeUserSince\">\n                </div>\n                <div class=\"form-group\">\n                    <button type=\"submit\" class=\"btn btn-success\" data-bind=\"click: activeUsers\">ActiveUsers&nbsp;<i data-bind=\"visible: processingActiveUsers\" class=\"fa fa-spinner fa-spin\"></i></button>\n                </div>\n            </form>\n            </div>\n            \n            <div class=\"row\">\n                <table id=\"activeUserTable\" class=\"display\" cellspacing=\"0\" width=\"100%\">\n                    <thead>\n                        <tr>\n                            <th>User Name</th>\n                            <th>User Email</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                    </tbody>\n                </table>\n            </div>\n        </div>\n        \n        <div id=\"delete-dialog-confirm\" tabindex=\"-1\" class=\"modal fade\" role=\"dialog\" data-bind=\"modal: delConcDialog.showDialog\">\n            <div class=\"modal-dialog\">\n                <div class=\"modal-content\">\n                    <div class=\"modal-header\">\n                        <button type=\"button\" class=\"close\" data-dismiss=\"modal\"><span aria-hidden=\"true\">&times;</span><span class=\"sr-only\">Close</span></button>\n                        <h4 class=\"modal-title\">Confirm deletion</h4>\n                    </div>\n\n                    <div class=\"modal-body\">\n                        <p><span class=\"fa fa-warning fa-lg\"></span>&nbsp; The User <span data-bind=\"text: deleteUsername\"></span> will be deleted. Are you sure?</p>\n                    </div>\n\n                    <div class=\"modal-footer\">\n                        <button type=\"button\" class=\"btn btn-default\" data-dismiss=\"modal\"><span class=\"glyphicon glyphicon-remove\"></span> Close</button>\n                        <button type=\"button\" class=\"btn btn-danger\" data-bind=\"click: delConcDialog.submit\"><span class=\"glyphicon glyphicon-ok\"></span> Delete</button>\n                    </div>\n                </div>\n            </div>\n        </div>\n        \n        <div id=\"update-dialog-confirm\" tabindex=\"-1\" class=\"modal fade\" role=\"dialog\" data-bind=\"modal: updateConcDialog.showDialog\">\n            <div class=\"modal-dialog\">\n                <div class=\"modal-content\">\n                    <div class=\"modal-header\">\n                        <button type=\"button\" class=\"close\" data-dismiss=\"modal\"><span aria-hidden=\"true\">&times;</span><span class=\"sr-only\">Close</span></button>\n                        <h4 class=\"modal-title\">User Update</h4>\n                    </div>\n\n                    <div class=\"modal-body\">\n                        <form class=\"form-horizontal\">\n                            <div class=\"form-group\">\n                                <label for=\"inputUsername\" class=\"control-label col-xs-2\">Username</label>\n                                <div class=\"col-xs-10\">\n                                    <p class=\"form-control-static\" data-bind=\"text: updateUsername\"></p>\n                                </div>\n                            </div>\n\n                            <div class=\"form-group\">\n                                <label for=\"inputEmail\" class=\"control-label col-xs-2\">Email</label>\n                                <div class=\"col-xs-10\">\n                                    <input type=\"email\" data-bind=\"value: userEmail\" class=\"form-control\" id=\"inputEmail\" placeholder=\"Email\">\n                                </div>\n                            </div>\n                        </form>\n                    </div>\n\n                    <div class=\"modal-footer\">\n                        <button type=\"button\" class=\"btn btn-default\" data-dismiss=\"modal\"><span class=\"glyphicon glyphicon-remove\"></span> Close</button>\n                        <button type=\"button\" class=\"btn btn-danger\" data-bind=\"click: updateConcDialog.submit\"><span class=\"glyphicon glyphicon-ok\"></span> Update</button>\n                    </div>\n                </div>\n            </div>\n        </div>\n    \n        <script>\n            function topBar(message) {\n                $(\"html, body\").animate({ scrollTop: 0 }, \"slow\");\n                $(\"<div />\", { \"class\": 'topbar', text: message }).hide().prependTo(\"body\").slideDown('fast').delay(5000).slideUp(function() { \n                    $(this).remove(); \n                });\n            }\n            \n            // Helper function so we know what has changed\n            // http://stackoverflow.com/questions/12166982\n            ko.observableArray.fn.subscribeArrayChanged = function(addCallback, deleteCallback) {\n                var previousValue = undefined;\n                this.subscribe(function(_previousValue) {\n                    previousValue = _previousValue.slice(0);\n                }, undefined, 'beforeChange');\n                this.subscribe(function(latestValue) {\n                    var editScript = ko.utils.compareArrays(previousValue, latestValue);\n                    for (var i = 0, j = editScript.length; i < j; i++) {\n                        switch (editScript[i].status) {\n                            case \"retained\":\n                                break;\n                            case \"deleted\":\n                                if (deleteCallback)\n                                    deleteCallback(editScript[i].value);\n                                break;\n                            case \"added\":\n                                if (addCallback)\n                                    addCallback(editScript[i].value);\n                                break;\n                        }\n                    }\n                    previousValue = undefined;\n                });\n            };\n            \n            // User object\n            var Person = function(data, dt) {\n                this.uri    = data.uri;\n                this.username = ko.observable(data.username);\n                this.usernameLink = ko.observable(data.usernameLink);\n                this.email = ko.observable(data.email);\n                this.twitter  = ko.observable(data.twitter);\n                this.connector   = ko.observable(data.connector);\n                this.card   = ko.observable(data.card);\n                this.delete = ko.observable(data.delete);\n                this.update = ko.observable(data.update);\n\n                // Subscribe a listener to the observable properties for the table\n                // and invalidate the DataTables row when they change so it will redraw\n\t            var that = this;\n\t            $.each( [ 'username', 'email', 'twitter', 'card', 'delete' ], function (i, prop) {\n\t\t            that[ prop ].subscribe( function (val) {\n\t\t\t            // Find the row in the DataTable and invalidate it, which will\n\t\t\t            // cause DataTables to re-read the data\n\t\t\t            var rowIdx = dt.column( 5 ).data().indexOf( that.uri );\n\t\t\t            dt.row( rowIdx ).invalidate();\n\t\t            } );\n\t            } );\n            };\n        \n            var table;\n            var people;\n            var users = {};\n            var dt;\n            var repoUsers;\n            var activeUserTable;\n        \n            function UserManagementVM(){\n                var self = this;\n                this.deleteUsername = ko.observable('');\n                this.updateUsername = ko.observable();\n                this.userEmail = ko.observable();\n                \n                this.delConcDialog = new DialogVM();\n                \n                this.updateConcDialog = new DialogVM();\n                \n                this.userName = ko.observable(\"\");\n                \n                this.searchUser = function(){\n                    findUser(self.userName());\n                }\n                \n                this.activeUserSince = ko.observable();\n                this.processingActiveUsers = ko.observable(false);\n                \n                this.activeUsers = function(){\n                    self.processingActiveUsers(true);\n                    findActiveUsers();\n                }\n                \n                this.yokeRepoUserCT = ko.observable();\n                this.totalUserCT = ko.observable();\n                this.usersCThasChanged = ko.observable();\n                this.userCTAvailable = ko.observable(false);\n                this.deactivatedUserCT = ko.computed(function(){\n                    this.usersCThasChanged();\n                    return this.yokeRepoUserCT() - _.keys(users).length;\n                }, this);\n                \n                this.deactivateUsers = ko.computed(function(){\n                    this.usersCThasChanged();\n                    var diffUsers =  _.difference(repoUsers, _.keys(users));\n                    return _.map(diffUsers, function(x){\n                        return {\n                            userInfo: x\n                        };\n                    });\n                }, this)\n            }\n        \n            var userManagementVM = new UserManagementVM();\n            ko.applyBindings(userManagementVM);\n            \n            function deleteUser(data){\n                userManagementVM.deleteUsername(data);\n                userManagementVM.delConcDialog.show(function(){\n                    try{\n                        $cjs.user.deleteUser(data);\n                    }catch(error){\n                        console.log(error);\n                    }\n                    people.splice(_.indexOf(people(), users[data]), 1);\n                });\n            }\n            \n            function updateUser(username, userEmail){\n                userManagementVM.updateUsername(username);\n                userManagementVM.userEmail(userEmail);\n                userManagementVM.updateConcDialog.show(function(){\n                    try{\n                        $.ajax({\n                            url: \"https://das.conceptjs.com/users/\"+username+\"/email\",\n                            data: JSON.stringify({\n                                \"username\": username,\n                                \"email\": userManagementVM.userEmail()\n                            }),\n                            contentType: \"application/json\",\n                            dataType: \"json\",\n                            type: \"PUT\",\n                            beforeSend: function(xhr) {\n                                xhr.setRequestHeader(\"Authorization\", \"tMGU08AYF8H3vZY3LKVsNQ==|cjs_super\");\n                            },\n                            xhrFields: {\n                                withCredentials: true\n                            }\n                        }).done(function(data){\n                            topBar('user update sucessful!');\n                        }).fail(function(jqXHR, textStatus, errorThrown){\n                            console.log(\"server response:\"+jqXHR.responseText);\n                            topBar('error occurs when update user!');\n    \t                })\n                    }catch(error){\n                        console.log(error);\n                    }\n                });\n            }\n            \n            function updateUserDetail(user){\n                var connectors = $cjs.search({\n                    uri: \"/common/yoke/oEL3rNNB0GAGx4320dvd93/\",\n                    queryJson: {\n                        \"filtered\" : {\n                            \"filter\" : {\n                                \"term\" : {\n                                    \"repo\" : \"/\"+user.username()+\"/yoke/\"\n                                }\n                            }\n                        }\n                    }\n                });\n                \n                if (connectors.hits.hits.length > 0){\n                    user.connector(_.map(connectors.hits.hits, function(x){\n                        return x._source.type;\n                    }).join(\",\"));\n                }\n                \n                var cards = $cjs.search({\n                    uri: \"/common/yoke/Zj66xRBTUtAzF4I1JhIuNA/\",\n                    queryJson: {\n                        \"filtered\" : {\n                            \"filter\" : {\n                                \"term\" : {\n                                    \"repo\" : \"/\"+user.username()+\"/yoke/\"\n                                }\n                            }\n                        }\n                    }\n                });\n\n                if (cards.hits.hits.length > 0){\n                    user.card(cards.hits.hits.length);\n                }\n            }\n            \n            function findUser(name){\n                var query;\n                users = {};\n                dt.clear().draw();\n    \t            $cjs.search({\n    \t            uri: \"/common/admin/tJS-xy42lO8qF4twDxPmwF/\",\n    \t            queryJson: {\n                        \"match\" : {\n    \t                    \"_all\" : name\n    \t                }\n                    },\n                    size: 10000,\n    \t            done : function(user){\n    \t                if (user.hits.hits.length > 0){\n    \t                                        _.each(user.hits.hits, function(x){\n    \t                                        var hitUser = x;\n    \t                                        var username = hitUser._source.username;\n    \t                                        \n    \t                                        var photoUrl = hitUser._source.photoUrl;\n    \t                                        var newUser = new Person({\n    \t                                            uri: hitUser._source.uri,\n    \t                                            username: username,\n    \t                                            //usernameLink: '<img class=\"user-avatar-image\"  alt=\"\" src=\"'+photoUrl+'\"><a href=\"/ide/'+ username + '/yoke/\" target=\"_blank\">' + username + '</a>',\n    \t                                            usernameLink: '<a href=\"/ide/'+ username + '/yoke/\" target=\"_blank\">' + username + '</a>',\n    \t                                            email: hitUser._source.email,\n    \t                                            twitter: hitUser._source.twitterHandle,\n    \t                                            connector: \"\",\n    \t                                            card: \"\",\n    \t                                            update: '<a  href=\"javascript:updateUser(\\''+username+'\\', \\''+hitUser._source.email+'\\')\">update</a>',\n    \t                                            delete: '<a  href=\"javascript:deleteUser(\\''+username+'\\')\">delete</a>'\n    \t                                        }, dt);\n    \t                                        \n    \t                                        //updateUserDetail(newUser);\n    \t                                                        \n                                                //people.push(newUser);\n                                                users[newUser.username()] = newUser;\n    \t                                        \n    \t                    $cjs.search({\n                                uri: \"/common/yoke/Zj66xRBTUtAzF4I1JhIuNA/\",\n                                queryJson: {\n                                    \"filtered\" : {\n    \t                                \"filter\" : {\n    \t                \t                \"bool\": {\n    \t                \t\t                \"must\": {\n    \t                \t\t\t                \"term\" : {\n        \t                    \t\t                \"repo\" : \"/\"+username+\"/yoke/\"\n        \t                    \t                }\n    \t                \t\t                }\n    \t                \t                }\n    \t                                }\n    \t                            }\n                                },\n                                size: 10000,\n                                done : function(cards){\n                                    if (cards.hits.hits.length > 0){\n                                        var userCards = {};\n                                        _.each(cards.hits.hits, function(y){\n                                            var cardUser = y._source.uri.split(\"/\")[1];\n                                            if (!_.isUndefined(userCards[cardUser])){\n                                                userCards[cardUser] = userCards[cardUser] + 1;\n                                            }else{\n                                                userCards[cardUser] = 1;\n                                            }\n                                        });\n                                        \n                                        //_.each(_.keys(users), function(z){\n                                            if (userCards[username]){\n                                                users[username].card(userCards[username].toString());\n                                            }\n                                            people.push(users[username]);\n                                        //});\n                                    }\n                                },\n                                fail : function(jqXHR, textStatus, errorThrown){\n                                    console.log(\"server response:\"+jqXHR.responseText);\n                                    topBar('error occurs when retrieving the cards!');\n    \t                        }\n                            });\n    \t                    });                \n    \t                                        \n    \t                }\n    \t            },\n    \t            fail : function(jqXHR, textStatus, errorThrown){\n                        console.log(\"server response:\"+jqXHR.responseText);\n                        topBar('error occurs when retrieving the users!');\n    \t            }\n    \t            });\n            }\n            \n            function refresh(people, dt, yokeUser){\n                var query;\n                users = {};\n                if (yokeUser){\n                    $cjs.search({\n                                uri: \"/common/core/G01wxgipQN8Xk4xU_iK7H1/\",\n                                queryJson: {\n                                    \"filtered\" : {\n                                        \"filter\" : {\n                                            \"term\" : {\n                                                \"repoName\" : \"yoke\"\n                                            }\n                                        }\n                                    }\n                                },\n                                size: 10000,\n                                done : function(repos){\n                                    userManagementVM.yokeRepoUserCT(repos.hits.hits.length);\n                                    if (repos.hits.hits.length > 0){\n                                        \n                                        repoUsers = _.map(repos.hits.hits, function(w){\n                                            return w._source.uri.split(\"/\")[1];\n                                        });\n                    \n    \t            $cjs.search({\n    \t            uri: \"/common/admin/tJS-xy42lO8qF4twDxPmwF/\",\n    \t            queryJson: {\n                        \"filtered\" : {\n    \t                    \"filter\" : {\n    \t                \t    \"bool\": {\n    \t                \t\t    \"must_not\": {\n    \t                \t\t\t    \"term\" : {\n        \t                    \t\t    \"name\" : \"private\"\n        \t                    \t    }\n    \t                \t\t    }\n    \t                \t    }\n    \t                    }\n    \t                }\n                    },\n                    size: 10000,\n    \t            done : function(user){\n    \t                if (user.hits.hits.length > 0){\n    \t                    userManagementVM.totalUserCT(user.hits.hits.length);\n    \t                                        _.each(user.hits.hits, function(x){\n    \t                                        var hitUser = x;\n    \t                                        var username = hitUser._source.username;\n    \t                                        \n    \t                                        if (_.indexOf(repoUsers, username) >= 0){\n    \t                                        \n    \t                                        var photoUrl = hitUser._source.photoUrl;\n    \t                                        var newUser = new Person({\n    \t                                            uri: hitUser._source.uri,\n    \t                                            username: username,\n    \t                                            //usernameLink: '<img class=\"user-avatar-image\"  alt=\"\" src=\"'+photoUrl+'\"><a href=\"/ide/'+ username + '/yoke/\" target=\"_blank\">' + username + '</a>',\n    \t                                            usernameLink: '<a href=\"/ide/'+ username + '/yoke/\" target=\"_blank\">' + username + '</a>',\n    \t                                            email: hitUser._source.email,\n    \t                                            twitter: hitUser._source.twitterHandle,\n    \t                                            connector: \"\",\n    \t                                            card: \"\",\n    \t                                            update: '<a  href=\"javascript:updateUser(\\''+username+'\\', \\''+hitUser._source.email+'\\')\">update</a>',\n    \t                                            delete: '<a  href=\"javascript:deleteUser(\\''+username+'\\')\">delete</a>'\n    \t                                        }, dt);\n    \t                                        \n    \t                                        //updateUserDetail(newUser);\n    \t                                                        \n                                                //people.push(newUser);\n                                                users[newUser.username()] = newUser;\n    \t                                        }\n    \t                                        });\n    \t                                        \n    \t                    $cjs.search({\n                                uri: \"/common/yoke/Zj66xRBTUtAzF4I1JhIuNA/\",\n                                queryJson: {\n                                    \"match_all\" : {}\n                                },\n                                size: 10000,\n                                done : function(cards){\n                                    if (cards.hits.hits.length > 0){\n                                        var userCards = {};\n                                        _.each(cards.hits.hits, function(y){\n                                            var cardUser = y._source.uri.split(\"/\")[1];\n                                            if (!_.isUndefined(userCards[cardUser])){\n                                                userCards[cardUser] = userCards[cardUser] + 1;\n                                            }else{\n                                                userCards[cardUser] = 1;\n                                            }\n                                        });\n                                        \n                                        _.each(_.keys(users), function(z){\n                                            if (userCards[z]){\n                                                users[z].card(userCards[z].toString());\n                                            }\n                                            people.push(users[z]);\n                                        });\n                                    }\n                                    \n                                    userManagementVM.usersCThasChanged.valueHasMutated();\n                                    userManagementVM.userCTAvailable(true);\n                                },\n                                fail : function(jqXHR, textStatus, errorThrown){\n                                    console.log(\"server response:\"+jqXHR.responseText);\n                                    topBar('error occurs when retrieving the cards!');\n    \t                        }\n                            });\n    \t                                        \n    \t                                        \n    \t                }\n    \t            },\n    \t            fail : function(jqXHR, textStatus, errorThrown){\n                        console.log(\"server response:\"+jqXHR.responseText);\n                        topBar('error occurs when retrieving the users!');\n    \t            }\n    \t            });\n                    }\n                    },\n    \t            fail : function(jqXHR, textStatus, errorThrown){\n                        console.log(\"server response:\"+jqXHR.responseText);\n                        topBar('error occurs when retrieving repositories!');\n    \t            }});\n                }\n\n            }\n            \n            function getUserEmail(username){\n                try{\n                    var userConc = $cjs.user.def({\"username\": username});\n                    return (userConc)?userConc.vars[0].expr.str:\"\";\n                }catch(error){\n                    console.log(\"failed to get user email:\"+error);\n                }\n            }\n            \n            function findActiveUsers(){\n                            var activeUsers = {};\n                            var threahold = moment(userManagementVM.activeUserSince()).valueOf();\n                            console.log(\"active threahold:\"+threahold+\" (\" + moment(threahold).format() + \")\");\n                            $cjs.search({\n                                uri: \"/common/yoke/Zj66xRBTUtAzF4I1JhIuNA/\",\n                                queryJson: {\"match_all\": { }},\n                                size: 50000,\n                                done : function(cards){\n                                    _.each(cards.hits.hits, function(x){\n                                        var user = $cjs.getUserFromUri(x._source.uri);\n                                        if (!_.has(activeUsers, user)){\n                                            var lastMdyTs = x._source.lastMdyTS;\n                                            if (Number(lastMdyTs) >= threahold){\n                                                console.log(\"found active user:\"+user);\n                                                var userEmail = getUserEmail(user);\n                                                activeUsers[user] = userEmail;\n                                                activeUserTable.row.add([user, userEmail]);\n                                            }\n                                        }\n                                    });\n                                    \n                                    activeUserTable.draw();\n                                    userManagementVM.processingActiveUsers(false);\n                                },\n                                fail : function(jqXHR, textStatus, errorThrown){\n                                    console.log(\"server response:\"+jqXHR.responseText);\n                                    topBar('error occurs when retrieving the cards!');\n    \t                        }\n                            });\n            }\n            \n            $(function () {\n                people = ko.mapping.fromJS( [] );\n\t            dt = $('#userTable').DataTable( {\n\t\t            columns: [\n\t\t\t            { data: 'usernameLink()', \"width\": \"20%\" },\n\t\t\t            { data: 'email()', \"width\": \"25%\" },\n\t\t\t            { data: 'twitter()', \"width\": \"15%\" },\n\t\t\t            { data: 'card()', \"width\": \"15%\" },\n\t\t\t            { data: 'update()', \"width\": \"5%\" },\n\t\t\t            { data: 'delete()', \"width\": \"5%\" },\n\t\t\t            { data: 'uri', \"width\": \"20%\" },\n\t\t            ],\n\t\t            \"order\": [[0, \"asc\"]],\n                    \"dom\": 'T<\"clear\">lfrtip',\n                    \"tableTools\": {\n                        \"sSwfPath\": \"https://cdn.datatables.net/tabletools/2.2.3/swf/copy_csv_xls_pdf.swf\",\n                        \"aButtons\": [\n                        {'sExtends':'copy',\n                            \"oSelectorOpts\": { filter: 'applied', order: 'current' }\n                        },\n                        {'sExtends':'csv',\n                            \"oSelectorOpts\": { filter: 'applied', order: 'current' }\n                        },\n                        {'sExtends':'xls',\n                            \"oSelectorOpts\": { filter: 'applied', order: 'current' }\n                        },\n                        {'sExtends':'pdf',\n                            \"oSelectorOpts\": { filter: 'applied', order: 'current' }\n                        },\n                        {'sExtends':'print',\n                            \"oSelectorOpts\": { filter: 'applied', order: 'current' }\n                        }]\n                    }\n\t            } );\n\t            \n\t            activeUserTable = $('#activeUserTable').DataTable( {\n\t\t            \"order\": [[0, \"asc\"]],\n                    \"dom\": 'T<\"clear\">lfrtip',\n                    \"tableTools\": {\n                        \"sSwfPath\": \"https://cdn.datatables.net/tabletools/2.2.3/swf/copy_csv_xls_pdf.swf\",\n                        \"aButtons\": [\n                        {'sExtends':'copy',\n                            \"oSelectorOpts\": { filter: 'applied', order: 'current' }\n                        },\n                        {'sExtends':'csv',\n                            \"oSelectorOpts\": { filter: 'applied', order: 'current' }\n                        },\n                        {'sExtends':'xls',\n                            \"oSelectorOpts\": { filter: 'applied', order: 'current' }\n                        },\n                        {'sExtends':'pdf',\n                            \"oSelectorOpts\": { filter: 'applied', order: 'current' }\n                        },\n                        {'sExtends':'print',\n                            \"oSelectorOpts\": { filter: 'applied', order: 'current' }\n                        }]\n                    },\n                    \"pageLength\": 100\n\t            } );\n\n\t            // Update the table when the `people` array has items added or removed\n\t            people.subscribeArrayChanged(\n\t\t            function ( addedItem ) {\n\t\t\t            dt.row.add( addedItem ).draw();\n\t\t            },\n\t\t            function ( deletedItem ) {\n\t\t\t            var rowIdx = dt.column( 5 ).data().indexOf( deletedItem.uri );\n\t\t\t            dt.row( dt.rows()[0][rowIdx] ).remove().draw();\n\t\t            }\n    \t        );\n\n\t            // Convert the data set into observable objects, and will also add the\n\t            // initial data to the table\n\t            var data = [];\n\t            ko.mapping.fromJS(\n\t\t            data,\n\t\t            {\n\t\t            \tkey: function(data) {\n\t\t\t\t            return ko.utils.unwrapObservable(data.uri);        \n\t\t\t            },\n\t\t\t            create: function(options) {\n\t\t\t\t            return new Person(options.data, dt);\n\t\t\t            }    \n\t\t            },\n\t\t            people\n\t            );\n\n                //refresh(people, dt, true);\n                \n                $(\"#showAllUser\").on(\"click\", function(){\n                    if ($(\"#showAllUser\").val()){\n                        refresh(people, dt, true);\n                    }\n                })\n            });\n        </script>\n    </body>\n</html>",
      "strEditMode" : "html",
      "type" : "STRING"
    }
  }, {
    "name" : "_page_propertyMap",
    "expr" : {
      "script" : "return {\"modelUri\": model.uri()};",
      "type" : "SCRIPT"
    }
  }, {
    "name" : "page",
    "expr" : {
      "concept" : "/common/core/Xfh2VQ4HSK9klqbqqR-eBB/",
      "bindings" : {
        "htmlTemplate" : "htmlTemplate",
        "propertyMap" : "_page_propertyMap"
      },
      "type" : "CONCEPT"
    }
  } ],
  "isas" : [ {
    "var" : "page"
  } ],
  "encodedidxhash" : "",
  "isLambda" : true
}